/* tslint:disable */
/* eslint-disable */
/**
 * PP Label ML backend API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import {
  InlineObject,
  InlineObjectFromJSON,
  InlineObjectToJSON,
  InlineObject1,
  InlineObject1FromJSON,
  InlineObject1ToJSON,
  Model,
  ModelFromJSON,
  ModelToJSON,
} from '../models';

export interface EvalRequest {
  modelName: string;
}

export interface GetProgressRequest {
  modelName: string;
}

export interface LoadRequest {
  modelName: string;
}

export interface PredictRequest {
  modelName: string;
  inlineObject1?: InlineObject1;
}

export interface TrainRequest {
  modelName: string;
  inlineObject?: InlineObject;
}

export interface UnloadRequest {
  modelName: string;
}

/**
 *
 */
export class ModelApi extends runtime.BaseAPI {
  /**
   * Evaluate model performance
   * Evaluate model performance
   */
  async evalRaw(
    requestParameters: EvalRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.modelName === null || requestParameters.modelName === undefined) {
      throw new runtime.RequiredError(
        'modelName',
        'Required parameter requestParameters.modelName was null or undefined when calling eval.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/{model_name}/eval`.replace(
          `{${'model_name'}}`,
          encodeURIComponent(String(requestParameters.modelName)),
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Evaluate model performance
   * Evaluate model performance
   */
  async eval(modelName: string, initOverrides?: RequestInit): Promise<void> {
    await this.evalRaw({ modelName: modelName }, initOverrides);
  }

  /**
   * Get all models
   * Get all models
   */
  async getAllRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Model>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ModelFromJSON));
  }

  /**
   * Get all models
   * Get all models
   */
  async getAll(initOverrides?: RequestInit): Promise<Array<Model>> {
    const response = await this.getAllRaw(initOverrides);
    return await response.value();
  }

  /**
   * Get training progress
   * Get training progress
   */
  async getProgressRaw(
    requestParameters: GetProgressRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.modelName === null || requestParameters.modelName === undefined) {
      throw new runtime.RequiredError(
        'modelName',
        'Required parameter requestParameters.modelName was null or undefined when calling getProgress.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/{model_name}/train`.replace(
          `{${'model_name'}}`,
          encodeURIComponent(String(requestParameters.modelName)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Get training progress
   * Get training progress
   */
  async getProgress(modelName: string, initOverrides?: RequestInit): Promise<void> {
    await this.getProgressRaw({ modelName: modelName }, initOverrides);
  }

  /**
   * Load model
   * Load a model into memory. Reduce predict latency
   */
  async loadRaw(
    requestParameters: LoadRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.modelName === null || requestParameters.modelName === undefined) {
      throw new runtime.RequiredError(
        'modelName',
        'Required parameter requestParameters.modelName was null or undefined when calling load.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/{model_name}/load`.replace(
          `{${'model_name'}}`,
          encodeURIComponent(String(requestParameters.modelName)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Load model
   * Load a model into memory. Reduce predict latency
   */
  async load(modelName: string, initOverrides?: RequestInit): Promise<void> {
    await this.loadRaw({ modelName: modelName }, initOverrides);
  }

  /**
   * Predict
   * Predict
   */
  async predictRaw(
    requestParameters: PredictRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.modelName === null || requestParameters.modelName === undefined) {
      throw new runtime.RequiredError(
        'modelName',
        'Required parameter requestParameters.modelName was null or undefined when calling predict.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/{model_name}/predict`.replace(
          `{${'model_name'}}`,
          encodeURIComponent(String(requestParameters.modelName)),
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: InlineObject1ToJSON(requestParameters.inlineObject1),
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Predict
   * Predict
   */
  async predict(
    modelName: string,
    inlineObject1?: InlineObject1,
    initOverrides?: RequestInit,
  ): Promise<void> {
    await this.predictRaw({ modelName: modelName, inlineObject1: inlineObject1 }, initOverrides);
  }

  /**
   * Train a model
   * Train a model
   */
  async trainRaw(
    requestParameters: TrainRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.modelName === null || requestParameters.modelName === undefined) {
      throw new runtime.RequiredError(
        'modelName',
        'Required parameter requestParameters.modelName was null or undefined when calling train.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/{model_name}/train`.replace(
          `{${'model_name'}}`,
          encodeURIComponent(String(requestParameters.modelName)),
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: InlineObjectToJSON(requestParameters.inlineObject),
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Train a model
   * Train a model
   */
  async train(
    modelName: string,
    inlineObject?: InlineObject,
    initOverrides?: RequestInit,
  ): Promise<void> {
    await this.trainRaw({ modelName: modelName, inlineObject: inlineObject }, initOverrides);
  }

  /**
   * Unload model
   * Unload a model to free up memory
   */
  async unloadRaw(
    requestParameters: UnloadRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.modelName === null || requestParameters.modelName === undefined) {
      throw new runtime.RequiredError(
        'modelName',
        'Required parameter requestParameters.modelName was null or undefined when calling unload.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/{model_name}/unload`.replace(
          `{${'model_name'}}`,
          encodeURIComponent(String(requestParameters.modelName)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Unload model
   * Unload a model to free up memory
   */
  async unload(modelName: string, initOverrides?: RequestInit): Promise<void> {
    await this.unloadRaw({ modelName: modelName }, initOverrides);
  }
}
