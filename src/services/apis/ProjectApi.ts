/* tslint:disable */
/* eslint-disable */
/**
 * PP-Label API Spec
 * Back end APIs for PP-Label
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: me@linhan.email
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import {
  Annotation,
  AnnotationFromJSON,
  AnnotationToJSON,
  Label,
  LabelFromJSON,
  LabelToJSON,
  Project,
  ProjectFromJSON,
  ProjectToJSON,
  Tag,
  TagFromJSON,
  TagToJSON,
  Task,
  TaskFromJSON,
  TaskToJSON,
} from '../models';

export interface PplabelApiControllerAnnotationGetByProjectRequest {
  projectId: string;
}

export interface PplabelApiControllerLabelGetByProjectRequest {
  projectId: string;
}

export interface PplabelApiControllerTagGetByProjectRequest {
  projectId: string;
}

export interface PplabelApiControllerTaskGetByProjectRequest {
  projectId: string;
}

export interface ProjectsPostRequest {
  project: Project;
  requestId?: string;
}

export interface ProjectsProjectIdDeleteRequest {
  projectId: number;
}

export interface ProjectsProjectIdGetRequest {
  projectId: number;
}

export interface ProjectsProjectIdPutRequest {
  projectId: number;
  project: Project;
}

/**
 *
 */
export class ProjectApi extends runtime.BaseAPI {
  /**
   * Your GET endpoint
   */
  async pplabelApiControllerAnnotationGetByProjectRaw(
    requestParameters: PplabelApiControllerAnnotationGetByProjectRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<Array<Annotation>>> {
    if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
      throw new runtime.RequiredError(
        'projectId',
        'Required parameter requestParameters.projectId was null or undefined when calling pplabelApiControllerAnnotationGetByProject.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/projects/{project_id}/annotations`.replace(
          `{${'project_id'}}`,
          encodeURIComponent(String(requestParameters.projectId)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AnnotationFromJSON));
  }

  /**
   * Your GET endpoint
   */
  async pplabelApiControllerAnnotationGetByProject(
    requestParameters: PplabelApiControllerAnnotationGetByProjectRequest,
    initOverrides?: RequestInit,
  ): Promise<Array<Annotation>> {
    const response = await this.pplabelApiControllerAnnotationGetByProjectRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Your GET endpoint
   */
  async pplabelApiControllerLabelGetByProjectRaw(
    requestParameters: PplabelApiControllerLabelGetByProjectRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<Array<Label>>> {
    if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
      throw new runtime.RequiredError(
        'projectId',
        'Required parameter requestParameters.projectId was null or undefined when calling pplabelApiControllerLabelGetByProject.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/projects/{project_id}/labels`.replace(
          `{${'project_id'}}`,
          encodeURIComponent(String(requestParameters.projectId)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LabelFromJSON));
  }

  /**
   * Your GET endpoint
   */
  async pplabelApiControllerLabelGetByProject(
    requestParameters: PplabelApiControllerLabelGetByProjectRequest,
    initOverrides?: RequestInit,
  ): Promise<Array<Label>> {
    const response = await this.pplabelApiControllerLabelGetByProjectRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Your GET endpoint
   */
  async pplabelApiControllerTagGetByProjectRaw(
    requestParameters: PplabelApiControllerTagGetByProjectRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<Array<Tag>>> {
    if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
      throw new runtime.RequiredError(
        'projectId',
        'Required parameter requestParameters.projectId was null or undefined when calling pplabelApiControllerTagGetByProject.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/projects/{project_id}/tags`.replace(
          `{${'project_id'}}`,
          encodeURIComponent(String(requestParameters.projectId)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TagFromJSON));
  }

  /**
   * Your GET endpoint
   */
  async pplabelApiControllerTagGetByProject(
    requestParameters: PplabelApiControllerTagGetByProjectRequest,
    initOverrides?: RequestInit,
  ): Promise<Array<Tag>> {
    const response = await this.pplabelApiControllerTagGetByProjectRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Your GET endpoint
   */
  async pplabelApiControllerTaskGetByProjectRaw(
    requestParameters: PplabelApiControllerTaskGetByProjectRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<Array<Task>>> {
    if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
      throw new runtime.RequiredError(
        'projectId',
        'Required parameter requestParameters.projectId was null or undefined when calling pplabelApiControllerTaskGetByProject.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/projects/{project_id}/tasks`.replace(
          `{${'project_id'}}`,
          encodeURIComponent(String(requestParameters.projectId)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TaskFromJSON));
  }

  /**
   * Your GET endpoint
   */
  async pplabelApiControllerTaskGetByProject(
    requestParameters: PplabelApiControllerTaskGetByProjectRequest,
    initOverrides?: RequestInit,
  ): Promise<Array<Task>> {
    const response = await this.pplabelApiControllerTaskGetByProjectRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Read all projects, sort by last modify date
   */
  async projectsGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Project>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/projects`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProjectFromJSON));
  }

  /**
   * Read all projects, sort by last modify date
   */
  async projectsGet(initOverrides?: RequestInit): Promise<Array<Project>> {
    const response = await this.projectsGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Create a new project
   */
  async projectsPostRaw(
    requestParameters: ProjectsPostRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<Project>> {
    if (requestParameters.project === null || requestParameters.project === undefined) {
      throw new runtime.RequiredError(
        'project',
        'Required parameter requestParameters.project was null or undefined when calling projectsPost.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (requestParameters.requestId !== undefined && requestParameters.requestId !== null) {
      headerParameters['request_id'] = String(requestParameters.requestId);
    }

    const response = await this.request(
      {
        path: `/projects`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: ProjectToJSON(requestParameters.project),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ProjectFromJSON(jsonValue));
  }

  /**
   * Create a new project
   */
  async projectsPost(
    requestParameters: ProjectsPostRequest,
    initOverrides?: RequestInit,
  ): Promise<Project> {
    const response = await this.projectsPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Delete a project record and ALL TASKS RECORDS under the project. Won\'t delete file on file system
   * Delete a project record and ALL TASKS RECORDS under the project.
   */
  async projectsProjectIdDeleteRaw(
    requestParameters: ProjectsProjectIdDeleteRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
      throw new runtime.RequiredError(
        'projectId',
        'Required parameter requestParameters.projectId was null or undefined when calling projectsProjectIdDelete.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/projects/{project_id}`.replace(
          `{${'project_id'}}`,
          encodeURIComponent(String(requestParameters.projectId)),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Delete a project record and ALL TASKS RECORDS under the project. Won\'t delete file on file system
   * Delete a project record and ALL TASKS RECORDS under the project.
   */
  async projectsProjectIdDelete(
    requestParameters: ProjectsProjectIdDeleteRequest,
    initOverrides?: RequestInit,
  ): Promise<void> {
    await this.projectsProjectIdDeleteRaw(requestParameters, initOverrides);
  }

  /**
   * Get info of a specific project
   */
  async projectsProjectIdGetRaw(
    requestParameters: ProjectsProjectIdGetRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<Project>> {
    if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
      throw new runtime.RequiredError(
        'projectId',
        'Required parameter requestParameters.projectId was null or undefined when calling projectsProjectIdGet.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/projects/{project_id}`.replace(
          `{${'project_id'}}`,
          encodeURIComponent(String(requestParameters.projectId)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ProjectFromJSON(jsonValue));
  }

  /**
   * Get info of a specific project
   */
  async projectsProjectIdGet(
    requestParameters: ProjectsProjectIdGetRequest,
    initOverrides?: RequestInit,
  ): Promise<Project> {
    const response = await this.projectsProjectIdGetRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Edit multiple project properties. Empty strings will be set. Properties not in request body won\'t be changed
   * Edit multiple project properties
   */
  async projectsProjectIdPutRaw(
    requestParameters: ProjectsProjectIdPutRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<Project>> {
    if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
      throw new runtime.RequiredError(
        'projectId',
        'Required parameter requestParameters.projectId was null or undefined when calling projectsProjectIdPut.',
      );
    }

    if (requestParameters.project === null || requestParameters.project === undefined) {
      throw new runtime.RequiredError(
        'project',
        'Required parameter requestParameters.project was null or undefined when calling projectsProjectIdPut.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/projects/{project_id}`.replace(
          `{${'project_id'}}`,
          encodeURIComponent(String(requestParameters.projectId)),
        ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: ProjectToJSON(requestParameters.project),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ProjectFromJSON(jsonValue));
  }

  /**
   * Edit multiple project properties. Empty strings will be set. Properties not in request body won\'t be changed
   * Edit multiple project properties
   */
  async projectsProjectIdPut(
    requestParameters: ProjectsProjectIdPutRequest,
    initOverrides?: RequestInit,
  ): Promise<Project> {
    const response = await this.projectsProjectIdPutRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
