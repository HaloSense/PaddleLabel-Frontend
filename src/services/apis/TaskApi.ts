/* tslint:disable */
/* eslint-disable */
/**
 * PP-Label API Spec
 * Back end APIs for PP-Label
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: me@linhan.email
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import { Task, TaskFromJSON, TaskToJSON } from '../models';

export interface TasksTaskIdDeleteRequest {
  taskId: string;
}

export interface TasksTaskIdGetRequest {
  taskId: string;
}

export interface TasksTaskIdPutRequest {
  taskId: string;
  task: Task;
}

/**
 *
 */
export class TaskApi extends runtime.BaseAPI {
  /**
   * Your GET endpoint
   */
  async tasksGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Task>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/tasks`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TaskFromJSON));
  }

  /**
   * Your GET endpoint
   */
  async tasksGet(initOverrides?: RequestInit): Promise<Array<Task>> {
    const response = await this.tasksGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Create a new task
   */
  async tasksPostRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Task>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/tasks`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => TaskFromJSON(jsonValue));
  }

  /**
   * Create a new task
   */
  async tasksPost(initOverrides?: RequestInit): Promise<Task> {
    const response = await this.tasksPostRaw(initOverrides);
    return await response.value();
  }

  /**
   * Delete a task and ALL DATA and ANNOTATIONS under the project. Won\'t delete file on file system
   * Delete a task and ALL DATA and ANNOTATIONS under the task.
   */
  async tasksTaskIdDeleteRaw(
    requestParameters: TasksTaskIdDeleteRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.taskId === null || requestParameters.taskId === undefined) {
      throw new runtime.RequiredError(
        'taskId',
        'Required parameter requestParameters.taskId was null or undefined when calling tasksTaskIdDelete.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/tasks/{task_id}`.replace(
          `{${'task_id'}}`,
          encodeURIComponent(String(requestParameters.taskId)),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Delete a task and ALL DATA and ANNOTATIONS under the project. Won\'t delete file on file system
   * Delete a task and ALL DATA and ANNOTATIONS under the task.
   */
  async tasksTaskIdDelete(taskId: string, initOverrides?: RequestInit): Promise<void> {
    await this.tasksTaskIdDeleteRaw({ taskId: taskId }, initOverrides);
  }

  /**
   * Get info of a specific task
   */
  async tasksTaskIdGetRaw(
    requestParameters: TasksTaskIdGetRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<Task>> {
    if (requestParameters.taskId === null || requestParameters.taskId === undefined) {
      throw new runtime.RequiredError(
        'taskId',
        'Required parameter requestParameters.taskId was null or undefined when calling tasksTaskIdGet.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/tasks/{task_id}`.replace(
          `{${'task_id'}}`,
          encodeURIComponent(String(requestParameters.taskId)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => TaskFromJSON(jsonValue));
  }

  /**
   * Get info of a specific task
   */
  async tasksTaskIdGet(taskId: string, initOverrides?: RequestInit): Promise<Task> {
    const response = await this.tasksTaskIdGetRaw({ taskId: taskId }, initOverrides);
    return await response.value();
  }

  /**
   * Edit task info. Provide key value pair to change one value only. Provide all changed values to change multiple. Empty string will be set. Leave values don\'t intend to change out of request body.
   * Edit task info
   */
  async tasksTaskIdPutRaw(
    requestParameters: TasksTaskIdPutRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<Task>> {
    if (requestParameters.taskId === null || requestParameters.taskId === undefined) {
      throw new runtime.RequiredError(
        'taskId',
        'Required parameter requestParameters.taskId was null or undefined when calling tasksTaskIdPut.',
      );
    }

    if (requestParameters.task === null || requestParameters.task === undefined) {
      throw new runtime.RequiredError(
        'task',
        'Required parameter requestParameters.task was null or undefined when calling tasksTaskIdPut.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/tasks/{task_id}`.replace(
          `{${'task_id'}}`,
          encodeURIComponent(String(requestParameters.taskId)),
        ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: TaskToJSON(requestParameters.task),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => TaskFromJSON(jsonValue));
  }

  /**
   * Edit task info. Provide key value pair to change one value only. Provide all changed values to change multiple. Empty string will be set. Leave values don\'t intend to change out of request body.
   * Edit task info
   */
  async tasksTaskIdPut(taskId: string, task: Task, initOverrides?: RequestInit): Promise<Task> {
    const response = await this.tasksTaskIdPutRaw({ taskId: taskId, task: task }, initOverrides);
    return await response.value();
  }
}
