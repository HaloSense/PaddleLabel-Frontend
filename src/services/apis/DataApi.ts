/* tslint:disable */
/* eslint-disable */
/**
 * PP-Label API Spec
 * Back end APIs for PP-Label
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: me@linhan.email
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import {
  Data,
  DataFromJSON,
  DataToJSON,
  InlineResponse200,
  InlineResponse200FromJSON,
  InlineResponse200ToJSON,
} from '../models';

export interface DatasDataIdDeleteRequest {
  dataId: number;
}

export interface DatasDataIdGetRequest {
  dataId: number;
}

export interface DatasDataIdPutRequest {
  dataId: number;
  data: Data;
}

export interface DatasPostRequest {
  data: Data;
  requestId?: string;
}

export interface PplabelApiControllerDataGetImageRequest {
  dataId: string;
}

/**
 *
 */
export class DataApi extends runtime.BaseAPI {
  /**
   * Delete a data record, file on file system will not be deleted
   * Delete a data record
   */
  async datasDataIdDeleteRaw(
    requestParameters: DatasDataIdDeleteRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.dataId === null || requestParameters.dataId === undefined) {
      throw new runtime.RequiredError(
        'dataId',
        'Required parameter requestParameters.dataId was null or undefined when calling datasDataIdDelete.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/datas/{data_id}`.replace(
          `{${'data_id'}}`,
          encodeURIComponent(String(requestParameters.dataId)),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Delete a data record, file on file system will not be deleted
   * Delete a data record
   */
  async datasDataIdDelete(
    requestParameters: DatasDataIdDeleteRequest,
    initOverrides?: RequestInit,
  ): Promise<void> {
    await this.datasDataIdDeleteRaw(requestParameters, initOverrides);
  }

  /**
   * Get info of a specific data record
   */
  async datasDataIdGetRaw(
    requestParameters: DatasDataIdGetRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<Data>> {
    if (requestParameters.dataId === null || requestParameters.dataId === undefined) {
      throw new runtime.RequiredError(
        'dataId',
        'Required parameter requestParameters.dataId was null or undefined when calling datasDataIdGet.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/datas/{data_id}`.replace(
          `{${'data_id'}}`,
          encodeURIComponent(String(requestParameters.dataId)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => DataFromJSON(jsonValue));
  }

  /**
   * Get info of a specific data record
   */
  async datasDataIdGet(
    requestParameters: DatasDataIdGetRequest,
    initOverrides?: RequestInit,
  ): Promise<Data> {
    const response = await this.datasDataIdGetRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Edit data record. Provide key value pair to change one value only. Provide all changed values to change multiple. Empty string will be set. Leave values don\'t intend to change out of request body.
   * Edit data record
   */
  async datasDataIdPutRaw(
    requestParameters: DatasDataIdPutRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<Data>> {
    if (requestParameters.dataId === null || requestParameters.dataId === undefined) {
      throw new runtime.RequiredError(
        'dataId',
        'Required parameter requestParameters.dataId was null or undefined when calling datasDataIdPut.',
      );
    }

    if (requestParameters.data === null || requestParameters.data === undefined) {
      throw new runtime.RequiredError(
        'data',
        'Required parameter requestParameters.data was null or undefined when calling datasDataIdPut.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/datas/{data_id}`.replace(
          `{${'data_id'}}`,
          encodeURIComponent(String(requestParameters.dataId)),
        ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: DataToJSON(requestParameters.data),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => DataFromJSON(jsonValue));
  }

  /**
   * Edit data record. Provide key value pair to change one value only. Provide all changed values to change multiple. Empty string will be set. Leave values don\'t intend to change out of request body.
   * Edit data record
   */
  async datasDataIdPut(
    requestParameters: DatasDataIdPutRequest,
    initOverrides?: RequestInit,
  ): Promise<Data> {
    const response = await this.datasDataIdPutRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Get all data, sort by last modified
   */
  async datasGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Data>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/datas/`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => DataFromJSON(jsonValue));
  }

  /**
   * Get all data, sort by last modified
   */
  async datasGet(initOverrides?: RequestInit): Promise<Data> {
    const response = await this.datasGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Create a new data record
   */
  async datasPostRaw(
    requestParameters: DatasPostRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<Data>> {
    if (requestParameters.data === null || requestParameters.data === undefined) {
      throw new runtime.RequiredError(
        'data',
        'Required parameter requestParameters.data was null or undefined when calling datasPost.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (requestParameters.requestId !== undefined && requestParameters.requestId !== null) {
      headerParameters['request_id'] = String(requestParameters.requestId);
    }

    const response = await this.request(
      {
        path: `/datas/`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: DataToJSON(requestParameters.data),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => DataFromJSON(jsonValue));
  }

  /**
   * Create a new data record
   */
  async datasPost(requestParameters: DatasPostRequest, initOverrides?: RequestInit): Promise<Data> {
    const response = await this.datasPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Your GET endpoint
   */
  async pplabelApiControllerDataGetImageRaw(
    requestParameters: PplabelApiControllerDataGetImageRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<InlineResponse200>> {
    if (requestParameters.dataId === null || requestParameters.dataId === undefined) {
      throw new runtime.RequiredError(
        'dataId',
        'Required parameter requestParameters.dataId was null or undefined when calling pplabelApiControllerDataGetImage.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/datas/{data_id}/image`.replace(
          `{${'data_id'}}`,
          encodeURIComponent(String(requestParameters.dataId)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      InlineResponse200FromJSON(jsonValue),
    );
  }

  /**
   * Your GET endpoint
   */
  async pplabelApiControllerDataGetImage(
    requestParameters: PplabelApiControllerDataGetImageRequest,
    initOverrides?: RequestInit,
  ): Promise<InlineResponse200> {
    const response = await this.pplabelApiControllerDataGetImageRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}
