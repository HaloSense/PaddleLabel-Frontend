/* tslint:disable */
/* eslint-disable */
/**
 * PP-Label API Spec
 * Back end APIs for PP-Label
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: me@linhan.email
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import {
  InlineObject1,
  InlineObject1FromJSON,
  InlineObject1ToJSON,
  User,
  UserFromJSON,
  UserToJSON,
} from '../models';

export interface PplabelApiControllerUserLoginRequest {
  inlineObject1?: InlineObject1;
}

export interface UsersUuidDeleteRequest {
  uuid: string;
}

export interface UsersUuidGetRequest {
  uuid: string;
}

export interface UsersUuidPutRequest {
  uuid: string;
  user: User;
}

/**
 *
 */
export class UserApi extends runtime.BaseAPI {
  /**
   * Login and get JWT
   */
  async pplabelApiControllerUserLoginRaw(
    requestParameters: PplabelApiControllerUserLoginRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/users/login`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: InlineObject1ToJSON(requestParameters.inlineObject1),
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Login and get JWT
   */
  async pplabelApiControllerUserLogin(
    inlineObject1?: InlineObject1,
    initOverrides?: RequestInit,
  ): Promise<void> {
    await this.pplabelApiControllerUserLoginRaw({ inlineObject1: inlineObject1 }, initOverrides);
  }

  /**
   * Get all users
   */
  async usersGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<User>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/users`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserFromJSON));
  }

  /**
   * Get all users
   */
  async usersGet(initOverrides?: RequestInit): Promise<Array<User>> {
    const response = await this.usersGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Add a new user
   */
  async usersPostRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<User>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/users`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
  }

  /**
   * Add a new user
   */
  async usersPost(initOverrides?: RequestInit): Promise<User> {
    const response = await this.usersPostRaw(initOverrides);
    return await response.value();
  }

  /**
   * Delete a user
   * Delete a user
   */
  async usersUuidDeleteRaw(
    requestParameters: UsersUuidDeleteRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
      throw new runtime.RequiredError(
        'uuid',
        'Required parameter requestParameters.uuid was null or undefined when calling usersUuidDelete.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/users/{uuid}`.replace(
          `{${'uuid'}}`,
          encodeURIComponent(String(requestParameters.uuid)),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Delete a user
   * Delete a user
   */
  async usersUuidDelete(uuid: string, initOverrides?: RequestInit): Promise<void> {
    await this.usersUuidDeleteRaw({ uuid: uuid }, initOverrides);
  }

  /**
   * Get info of a specific user
   */
  async usersUuidGetRaw(
    requestParameters: UsersUuidGetRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<User>> {
    if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
      throw new runtime.RequiredError(
        'uuid',
        'Required parameter requestParameters.uuid was null or undefined when calling usersUuidGet.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/users/{uuid}`.replace(
          `{${'uuid'}}`,
          encodeURIComponent(String(requestParameters.uuid)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
  }

  /**
   * Get info of a specific user
   */
  async usersUuidGet(uuid: string, initOverrides?: RequestInit): Promise<User> {
    const response = await this.usersUuidGetRaw({ uuid: uuid }, initOverrides);
    return await response.value();
  }

  /**
   * Edit user info.
   * Edit user info
   */
  async usersUuidPutRaw(
    requestParameters: UsersUuidPutRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<User>> {
    if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
      throw new runtime.RequiredError(
        'uuid',
        'Required parameter requestParameters.uuid was null or undefined when calling usersUuidPut.',
      );
    }

    if (requestParameters.user === null || requestParameters.user === undefined) {
      throw new runtime.RequiredError(
        'user',
        'Required parameter requestParameters.user was null or undefined when calling usersUuidPut.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/users/{uuid}`.replace(
          `{${'uuid'}}`,
          encodeURIComponent(String(requestParameters.uuid)),
        ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: UserToJSON(requestParameters.user),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
  }

  /**
   * Edit user info.
   * Edit user info
   */
  async usersUuidPut(uuid: string, user: User, initOverrides?: RequestInit): Promise<User> {
    const response = await this.usersUuidPutRaw({ uuid: uuid, user: user }, initOverrides);
    return await response.value();
  }
}
