/* tslint:disable */
/* eslint-disable */
/**
 * PP-Label API Spec
 * Back end APIs for PP-Label
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: me@linhan.email
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import {
  InlineObject,
  InlineObjectFromJSON,
  InlineObjectToJSON,
  Tag,
  TagFromJSON,
  TagToJSON,
} from '../models';

export interface ByTaskRequest {
  taskId: string;
}

export interface TagsPostRequest {
  tag: Tag;
  requestId?: string;
}

export interface TagsTagIdDeleteRequest {
  tagId: string;
}

export interface TagsTagIdGetRequest {
  tagId: string;
}

export interface TagsTagIdPutRequest {
  tagId: string;
  tag: Tag;
}

export interface ToTaskRequest {
  taskId: string;
  requestId?: string;
  inlineObject?: InlineObject;
}

/**
 *
 */
export class TagApi extends runtime.BaseAPI {
  /**
   * Get all tags of the task
   */
  async byTaskRaw(
    requestParameters: ByTaskRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<Array<Tag>>> {
    if (requestParameters.taskId === null || requestParameters.taskId === undefined) {
      throw new runtime.RequiredError(
        'taskId',
        'Required parameter requestParameters.taskId was null or undefined when calling byTask.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/tasks/{task_id}/tags`.replace(
          `{${'task_id'}}`,
          encodeURIComponent(String(requestParameters.taskId)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TagFromJSON));
  }

  /**
   * Get all tags of the task
   */
  async byTask(taskId: string, initOverrides?: RequestInit): Promise<Array<Tag>> {
    const response = await this.byTaskRaw({ taskId: taskId }, initOverrides);
    return await response.value();
  }

  /**
   * Get all tags, sort by last modify date
   */
  async tagsGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Tag>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/tags`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TagFromJSON));
  }

  /**
   * Get all tags, sort by last modify date
   */
  async tagsGet(initOverrides?: RequestInit): Promise<Array<Tag>> {
    const response = await this.tagsGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Create a new tag
   */
  async tagsPostRaw(
    requestParameters: TagsPostRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<Tag>> {
    if (requestParameters.tag === null || requestParameters.tag === undefined) {
      throw new runtime.RequiredError(
        'tag',
        'Required parameter requestParameters.tag was null or undefined when calling tagsPost.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (requestParameters.requestId !== undefined && requestParameters.requestId !== null) {
      headerParameters['request_id'] = String(requestParameters.requestId);
    }

    const response = await this.request(
      {
        path: `/tags`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: TagToJSON(requestParameters.tag),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => TagFromJSON(jsonValue));
  }

  /**
   * Create a new tag
   */
  async tagsPost(tag: Tag, requestId?: string, initOverrides?: RequestInit): Promise<Tag> {
    const response = await this.tagsPostRaw({ tag: tag, requestId: requestId }, initOverrides);
    return await response.value();
  }

  /**
   * Delete a tag and ALL TAGGING RECORDS under this tag.
   * Delete a tag and ALL TAGGING RECORDS under this tag.
   */
  async tagsTagIdDeleteRaw(
    requestParameters: TagsTagIdDeleteRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.tagId === null || requestParameters.tagId === undefined) {
      throw new runtime.RequiredError(
        'tagId',
        'Required parameter requestParameters.tagId was null or undefined when calling tagsTagIdDelete.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/tags/{tag_id}`.replace(
          `{${'tag_id'}}`,
          encodeURIComponent(String(requestParameters.tagId)),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Delete a tag and ALL TAGGING RECORDS under this tag.
   * Delete a tag and ALL TAGGING RECORDS under this tag.
   */
  async tagsTagIdDelete(tagId: string, initOverrides?: RequestInit): Promise<void> {
    await this.tagsTagIdDeleteRaw({ tagId: tagId }, initOverrides);
  }

  /**
   * Get info of a specific tag
   */
  async tagsTagIdGetRaw(
    requestParameters: TagsTagIdGetRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<Tag>> {
    if (requestParameters.tagId === null || requestParameters.tagId === undefined) {
      throw new runtime.RequiredError(
        'tagId',
        'Required parameter requestParameters.tagId was null or undefined when calling tagsTagIdGet.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/tags/{tag_id}`.replace(
          `{${'tag_id'}}`,
          encodeURIComponent(String(requestParameters.tagId)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => TagFromJSON(jsonValue));
  }

  /**
   * Get info of a specific tag
   */
  async tagsTagIdGet(tagId: string, initOverrides?: RequestInit): Promise<Tag> {
    const response = await this.tagsTagIdGetRaw({ tagId: tagId }, initOverrides);
    return await response.value();
  }

  /**
   * Edit tag properties. Empty strings will be set. Properties not in request body won\'t be changed
   * Edit tag properties
   */
  async tagsTagIdPutRaw(
    requestParameters: TagsTagIdPutRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<Tag>> {
    if (requestParameters.tagId === null || requestParameters.tagId === undefined) {
      throw new runtime.RequiredError(
        'tagId',
        'Required parameter requestParameters.tagId was null or undefined when calling tagsTagIdPut.',
      );
    }

    if (requestParameters.tag === null || requestParameters.tag === undefined) {
      throw new runtime.RequiredError(
        'tag',
        'Required parameter requestParameters.tag was null or undefined when calling tagsTagIdPut.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/tags/{tag_id}`.replace(
          `{${'tag_id'}}`,
          encodeURIComponent(String(requestParameters.tagId)),
        ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: TagToJSON(requestParameters.tag),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => TagFromJSON(jsonValue));
  }

  /**
   * Edit tag properties. Empty strings will be set. Properties not in request body won\'t be changed
   * Edit tag properties
   */
  async tagsTagIdPut(tagId: string, tag: Tag, initOverrides?: RequestInit): Promise<Tag> {
    const response = await this.tagsTagIdPutRaw({ tagId: tagId, tag: tag }, initOverrides);
    return await response.value();
  }

  /**
   * Add a new tag to the task
   */
  async toTaskRaw(
    requestParameters: ToTaskRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<Array<Tag>>> {
    if (requestParameters.taskId === null || requestParameters.taskId === undefined) {
      throw new runtime.RequiredError(
        'taskId',
        'Required parameter requestParameters.taskId was null or undefined when calling toTask.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (requestParameters.requestId !== undefined && requestParameters.requestId !== null) {
      headerParameters['request_id'] = String(requestParameters.requestId);
    }

    const response = await this.request(
      {
        path: `/tasks/{task_id}/tags`.replace(
          `{${'task_id'}}`,
          encodeURIComponent(String(requestParameters.taskId)),
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: InlineObjectToJSON(requestParameters.inlineObject),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TagFromJSON));
  }

  /**
   * Add a new tag to the task
   */
  async toTask(
    taskId: string,
    requestId?: string,
    inlineObject?: InlineObject,
    initOverrides?: RequestInit,
  ): Promise<Array<Tag>> {
    const response = await this.toTaskRaw(
      { taskId: taskId, requestId: requestId, inlineObject: inlineObject },
      initOverrides,
    );
    return await response.value();
  }
}
